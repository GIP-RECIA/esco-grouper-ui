/**
 * Copyright (C) 2009 GIP RECIA http://www.recia.fr
 * @Author (C) 2009 GIP RECIA <contact@recia.fr>
 * @Contributor (C) 2009 SOPRA http://www.sopragroup.com/
 * @Contributor (C) 2011 Pierre Legay <pierre.legay@recia.fr>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ESUP-Portail Commons - Copyright (c) 2006-2009 ESUP-Portail consortium.
 */
package org.esupportail.commons.batch; 

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.esupportail.commons.exceptions.ConfigException;
import org.esupportail.commons.services.application.ApplicationService;
import org.esupportail.commons.services.application.ApplicationUtils;
import org.esupportail.commons.services.exceptionHandling.ExceptionUtils;
import org.esupportail.commons.services.logging.Logger;
import org.esupportail.commons.services.logging.LoggerImpl;

/**
 * A class that prints the application properties in a properties file (for ant targets).
 */
public class PrintApplicationProperties {

	/**
	 * A logger.
	 */
	private static final Logger LOG = new LoggerImpl(PrintApplicationProperties.class);

	/**
	 * Bean constructor.
	 */
	private PrintApplicationProperties() {
		throw new UnsupportedOperationException();
	}

	/**
	 * Print the syntax and exit.
	 */
	private static void syntax() {
		throw new IllegalArgumentException(
				"syntax: " + PrintApplicationProperties.class.getSimpleName() + " <file>");
	}
	
	/**
	 * Print the application name and version to a properties file.
	 * @param path the path of the file to write
	 * @throws IOException 
	 * @throws ConfigException 
	 */
	private static void print(final String path) throws IOException, ConfigException {
		File file = new File(path);
		if (file.exists() && !file.delete()) {
			throw new IOException("could not delete [" + path + "]");
		}
        FileWriter out = new FileWriter(file);
        out.write("#\n");
        out.write("# " + path + "\n");
        out.write("#\n");
        out.write("# This file was generated by ant target _print-application-properties,\n");
        out.write("# do not edit manually\n");
        out.write("#\n");
        out.write("\n");
		ApplicationService applicationService = ApplicationUtils.createApplicationService();
        out.write("app.name=" + applicationService.getName() + "\n");
        out.write("app.version=" + applicationService.getVersion() + "\n");
        out.write("app.copyright=" + applicationService.getCopyright() + "\n");
        out.close();
        LOG.info("wrote [" + path + "].");
	}

	/**
	 * Dispatch dependaing on the arguments.
	 * @param args
	 * @throws IOException 
	 */
	protected static void dispatch(final String[] args) throws IOException {
		switch (args.length) {
		case 1:
			print(args[0]);
			break;
		default:
			syntax();
			break;
		}
	}

	/**
	 * The main method, called by ant.
	 * @param args
	 */
	public static void main(final String[] args) {
		try {
			dispatch(args);
		} catch (Throwable t) {
			ExceptionUtils.catchException(t);
		}
	}

}
